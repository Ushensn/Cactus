#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/6167aa96-7831-4779-a38f-b9454777377d 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humi;
  float soilhumi;
  float tempvar;
  bool fanout;
  bool lighton;
  bool watering;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "DHT.h"
#define DHTPIN A0
#define DHTTYPE DHT11


DHT dht(DHTPIN, DHTTYPE);
int seconds = 0;
int RelayPin = 2;
int analogPin = 5;
int sh =0;
int shv =0;
int val = 0;


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  Serial.begin(9600) ;
  dht.begin();
  pinMode(2, OUTPUT);
  pinMode(3, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(13, OUTPUT);
  pinMode(RelayPin, OUTPUT);
  
  

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  delay(2000);
  float h = dht. readHumidity();
  float t = dht. readTemperature();
  int sensorValue = analogRead(A5);
  val = analogRead(analogPin);
  Serial.print("val = ");
  Serial.println(val);
  //int reading = analogRead(sensorPin);
  sh = (val*100)/1024;
  tempvar = t;
  shv = (100-sh);
  humi = h;
  soilhumi = shv;
  Serial.print("shv = ");
  Serial.println(shv);
  Serial.print("tempvar = ");
  Serial.println(tempvar);
  Serial.print("humi = ");
  Serial.println(humi);
  digitalWrite(RelayPin, LOW);

  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT Sensor");
    return;
  }
  if (lighton == 0){ 
    if (t > 100 ) {
      digitalWrite(3, HIGH); // light
   } else {
     digitalWrite(3, LOW);
    }
  }
  if (fanout == 0){ 
    if (t > 20) {
      digitalWrite(4, HIGH); // fanout
  } else {
      digitalWrite(4, LOW);
    }
  }
  if (shv = 1) {
    digitalWrite(RelayPin, HIGH);

  } else {
    digitalWrite(RelayPin, LOW);
  }
  if (h > 40) {
    digitalWrite(13, HIGH);

  } else {
    digitalWrite(13, LOW);
  }

  
  Serial.print("Humidity: ");
  Serial.print(h);
  Serial.print(" %\t");
  Serial.print("Temperature: ");
  Serial.print(t);
  Serial.print(" ํC\t");
  
  
}

/*
  Since Arduino is READ_WRITE variable, onArduinoChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onArduinoChange()  {
  // Add your code here to act upon Arduino change
}
/*
  Since Tempvar is READ_WRITE variable, onTempvarChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempvarChange()  {
  // Add your code here to act upon Tempvar change
}
/*
  Since Sensor is READ_WRITE variable, onSensorChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSensorChange()  {
  // Add your code here to act upon Sensor change
}






/*
  Since Humi is READ_WRITE variable, onHumiChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumiChange()  {
  // Add your code here to act upon Humi change
}

/*
  Since Soiltemp is READ_WRITE variable, onSoiltempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoiltempChange()  {
  // Add your code here to act upon Soiltemp change
}

/*
  Since Soilhumi is READ_WRITE variable, onSoilhumiChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoilhumiChange()  {
  // Add your code here to act upon Soilhumi change
}



/*
  Since Lighton is READ_WRITE variable, onLightonChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLightonChange()  {
  // Add your code here to act upon Lighton change
  Serial.print("LightChange:");
  Serial.println(lighton);
  if(lighton == 1)
  {
    digitalWrite(3, HIGH);
  } else {
    digitalWrite(3, LOW);
  }
}









/*
  Since Fanout is READ_WRITE variable, onFanoutChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFanoutChange()  {
  // Add your code here to act upon Lighton change
  Serial.print("fanout:");
  Serial.println(fanout);
  if(fanout == 1)
  {
    digitalWrite(4, HIGH);
  } else {
    digitalWrite(4, LOW);
  }


  // Add your code here to act upon Fanout change
}


/*
  Since Watering is READ_WRITE variable, onWateringChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onWateringChange()  {
  // Add your code here to act upon Watering change
}
